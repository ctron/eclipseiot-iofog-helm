apiVersion: v1
kind: ServiceAccount
metadata:
  name: iofog-kubelet
  namespace: {{ .Values.namespace }}
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: iofog-kubelet
subjects:
  - kind: ServiceAccount
    name: iofog-kubelet
    namespace: {{ .Values.namespace }}
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kubelet
  namespace: {{ .Values.namespace }}
  labels:
    name: kubelet
spec:
  replicas: {{ .Values.kubelet.replicas }}
  selector:
    matchLabels:
      name: kubelet
  template:
    metadata:
      labels:
        name: kubelet
    spec:
      serviceAccountName: iofog-kubelet
      volumes:
        - name: conf
          emptyDir: {}
      initContainers:
        - name: wait-for-controller
          image: fmiguelez/alpine-curl-jq:latest
          env:
            - name: CONTROLLER_URL
              value: "{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
          command:
            - /bin/sh
            - -c
            - |
              until [[ "$(curl ${CONTROLLER_URL}/status 2>/dev/null | jq -r ".status")" == "online" ]]; do
                echo "Waiting for Controller at ${CONTROLLER_URL}..."
                sleep 5
              done
        - name: user-login
          image: fmiguelez/alpine-curl-jq:latest
          volumeMounts:
            - mountPath: /conf
              name: conf
          env:
            - name: CONTROLLER_URL
              value: "{{ .Values.controller.host }}:{{ .Values.controller.port }}/api/v3"
          command:
            - /bin/sh
            - -c
            - |
              until [[ -n "${TOKEN}" && "${TOKEN}" != "null" ]]; do
                TOKEN="$(curl -X POST http://controller:51121/api/v3/user/login \
                             -H 'Content-Type: application/json' \
                             -d '{"email":"user@domain.com","password":"#Bugs4Fun"}' 2>/dev/null \
                             | jq -r '.accessToken')"
              done
              echo "${TOKEN}" > /conf/login-token
      containers:
      - name: kubelet
        image: {{ .Values.kubelet.image }}
        imagePullPolicy: {{ .Values.kubelet.imagePullPolicy }}
        volumeMounts:
          - mountPath: /conf
            name: conf
        args: 
        - "--namespace"
        - {{ .Values.namespace }}
        - "--iofog-token"
        - {{ .Values.controller.token | quote }}
        - "--iofog-url"
        - {{ .Values.controller.host }}:{{ .Values.controller.port }}
